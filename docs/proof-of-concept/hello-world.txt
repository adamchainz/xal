############
Hello world!
############

Hello world:

.. doctest::

   from xal.session import Session
   from xal.client import LocalClient
   from xal.cmd.local import LocalCmdProvider

   session = Session(client=LocalClient)
   session.registry.register('cmd', LocalCmdProvider())

   session.cmd.echo(u'Hello world!')


Defaults...

.. code-block:: python

   from xal import Session

   context = Session()
   context.dir.create(context.file.join(context.dir.home(), 'foo', 'bar'))
   context.package.install('postgresql')
   print context.postgresql.version
   context.postgresql.start()
   context.service.stop(postgresql)

Basic customization...

.. code-block:: python

   from xal import Session

   context = Session(sudoer=True)  # Will execute commands with "sudo" or equivalent.
   context.package.install('postgresql')

   remote = Session('foo@example.com', identity_file=context.file.join(context.ssh.cfg_dir, 'id_foo'))
   assert(remote.user.is_sudoer)
   remote.package.install('postgresql', version='8.2')

Using Fabric:

.. code-block:: python

   from xal import FabricSession
   from fabric import api as fab_api

   @task
   def install_postgresql():
       """"Install PostgreSQL server."""
       session = FabricSession(env=fab_api.env)
       session.package.install('postgresql')

In a buildout recipe:

.. code-block:: python

   from xal import BuildoutSession

   class PackageRecipe(object):
       def __init__(self, buildout, name, options):
           self.session = BuildoutSession(buildout)
           options['version'] = options['version'] or session.package.VERSION_LATEST
           options['provider'] = session.package.get(options['provider'], None)
           self.name, self.options = name, options

       def install(self):
           self.session.package.install(self.options['package'],
                                        version=self.options['version'],
                                        provider=self.options['provider'])
