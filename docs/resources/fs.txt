############################
Paths, files and directories
############################

`xal` provides tools to manage files and directories.


************
Path objects
************

In builtin `xal` sessions (:class:`~xal.session.local.LocalSession` and
:class:`~xal.session.fabric.FabricSession`), there is a ``fs`` interface. This
interface exposes a ``path`` API to manage paths as resources:

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_registry

The ``fs.path`` interface can be used as a factory to create
:class:`~xal.fs.resource.Path` resources:

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_path_factory

``Path`` instance can be converted to text:

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_path_repr

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_path_str

.. tip::

   `xal`'s path API is widely inspired by :mod:`pathlib`. As a `Python`
   developer, if you feel familiar with :mod:`pathlib`, then you may jump to
   `differences with pathlib`_ section.

Properties
==========

``Path`` instances have properties just like :mod:`pathlib`'s pure paths:

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_path_properties


Methods
=======

``Path`` instances have methods like :class:`pathlib.PurePath`:

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_purepath_methods


Methods like pathlib.Path
=========================

stat()
------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_stat

chmod(mode)
-----------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_chmod

exists()
--------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_exists

glob(pattern) and rglob(pattern)
--------------------------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_glob

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_rglob

group()
-------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_group

is_dir()
--------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_is_dir

is_file()
---------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_is_file

is_symlink() and symlink_to(target, target_is_directory=False)
--------------------------------------------------------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_symlink

is_socket()
-----------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_is_socket

is_fifo()
---------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_is_fifo

is_block_device()
-----------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_is_block_device

is_char_device()
----------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_is_char_device

iterdir()
---------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_iterdir

lchmod()
--------

lstat()
-------

mkdir(mode=0o777, parents=False) and rmdir()
--------------------------------------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_mkdir


open(mode='r', buffering=-1, encoding=None, errors=None, newline=None)
----------------------------------------------------------------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_open

owner()
-------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_owner

rename() and replace()
----------------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_rename

resolve()
---------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_resolve

touch(mode=0o777, exist_ok=True) and unlink()
---------------------------------------------

.. literalinclude:: /../tests/fs.py
   :language: python
   :pyobject: test_touch


Differences with pathlib
========================

Path constructor accepts a single argument
------------------------------------------

:class:`pathlib.Path` accepts multiple positional arguments. In `xal`, only
one is accepted. This limitation eases implementation on pure paths (without a
session).

cwd()
-----

:mod:`pathlib` implements ``cwd()`` as a class-level method of ``Path``. In
`xal`, it is a method of the instance of provider API, generally
``session.fs.cwd()``.

mkdir() as a context manager
----------------------------

with mkdir() block destroys created tree on exit. # TODO

resolve() works with non-existent files
---------------------------------------

pathlib.Path.resolve() raises OSError when called on a non-existent file or
directory. In case of non existent file, `xal`'s resolve() returns absolute
path to file.

touch() returns Path instance
-----------------------------

pathlib.Path.touch() returns None, whereas xal's Path.touch() returns Path
instance, so that calls can be chained.


******
fs API
******

FileSystem resource
===================

.. autoclass:: xal.fs.resource.FileSystem

.. doctest::

   >>> from xal.fs.resource import FileSystem
   >>> def demo_resource(session):
   ...     """Demonstrate use of ``FileSystem`` resource."""
   ...     fs = session.fs  # Just a shortcut.
   ...
   ...     # ``session.fs`` is a resource factory.
   ...     resource = fs('test-fs')
   ...     assert isinstance(resource, FileSystem)
   ...
   ...     # Just use path as strings.
   ...     assert str(resource) == 'test-fs'
   ...
   ...     # Paths remain relative until they are actually used. Absolute
   ...     # values are used as soon as filesystem operation is performed.
   ...     assert resource.is_relative()
   ...     created_resource = resource.mkdir()
   ...     assert created_resource.is_absolute()
   ...     assert resource.is_relative()  # Original value is preserved.
   ...
   ...     # Cleanup.
   ...     fs.rm(created_resource)

cd
==

.. automethod:: xal.fs.resource.FileSystem.cd

.. doctest::

   >>> def demo_cd(session):
   ...     """Demonstrate use of ``cd``."""
   ... 	   fs = session.fs  # Just a shortcut.
   ...
   ...     # Let's create a new directory.
   ...     path = fs.mkdir('test-fs')
   ...
   ...     # Change working directory.
   ...     initial_path = fs.cwd()
   ...     assert fs.cwd() != path
   ...     with fs.cd(path) as sub_path:
   ...         assert fs.cwd() == path == sub_path
   ...         assert sub_path.parent == initial_path
   ...     assert fs.cwd() == initial_path
   ...
   ...     # Also works without context manager.
   ...     # Notice that once used, paths are absolute.
   ...     rel_path = fs('test-fs')
   ...     assert rel_path.is_relative()
   ...     abs_path = rel_path.cd()
   ...     assert abs_path.is_absolute()
   ...
   ...     # Cleanup.
   ...     fs.cd(initial_path)
   ...     fs.rm(path)

mkdir
=====

.. automethod:: xal.fs.resource.FileSystem.mkdir

.. doctest::

   >>> def demo_mkdir(session):
   ...     """Demonstrate use of ``mkdir``."""
   ...     fs = session.fs  # Just a shortcut.
   ...
   ...     # Let's create a new directory.
   ...     assert not fs.exists('test-fs')
   ...     path = fs.mkdir('test-fs')
   ...     assert fs.exists('test-fs')
   ...
   ...     # mkdir() returns absolute path, even if created from relative
   ...     # value.
   ...     assert str(path) != 'test-fs'
   ...     assert path.is_absolute()
   ...
   ...     # Cleanup.
   ...     fs.rm(path)


*********
Providers
*********

Local
=====

Let's execute demo function above in local session.

First setup a local session:

.. doctest::

   >>> from xal.session.local import LocalSession
   >>> session = LocalSession()

Then run generic code within specific session:

.. doctest::

   >>> demo_resource(session)
   >>> demo_cd(session)
   >>> demo_mkdir(session)

SSH using Fabric
================

Let's do the same over SSH using Fabric!

Setup some SSH session:

.. doctest::

   >>> from xal.session.fabric import FabricSession
   >>> session = FabricSession()
   >>> session.client.connect('localhost')
   True

Then run generic code within specific session:

.. doctest::

   >>> demo_resource(session)
   >>> demo_cd(session)
   >>> demo_mkdir(session)
