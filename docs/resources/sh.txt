###########
sh commands
###########

`xal` provides an interface to run shell commands through ``sh``.

.. tip::

   With a local session, XAL is a convenient wrapper for :mod:`subprocess`.


***********
Basic usage
***********

In builtin `xal` sessions (:class:`~xal.session.local.LocalSession` and
:class:`~xal.session.fabric.FabricSession`), there is a ``sh`` interface:

.. literalinclude:: /../tests/sh.py
   :language: python
   :pyobject: test_registry

The ``sh`` interface can be used as a factory to create
:class:`~xal.sh.resource.ShCommand` resources:

.. literalinclude:: /../tests/sh.py
   :language: python
   :pyobject: test_resource_factory

Command resources are not executed automatically once created. First you
configure them (arguments, pipes, ...), then you actually run them. You have to
run them explicitely. They are callables. When called, they return a
:class:`~xal.sh.resource.ShResult` instance:

.. literalinclude:: /../tests/sh.py
   :language: python
   :pyobject: test_basic_usage

Command constructor accepts strings or iterables:

.. literalinclude:: /../tests/sh.py
   :language: python
   :pyobject: test_command_constructor

The ``sh`` interface has a ``run()`` shortcut that creates and runs ``Cmd``
instances:

.. literalinclude:: /../tests/sh.py
   :language: python
   :pyobject: test_run_shortcut


*****
Pipes
*****

You can create and handle pipes, they are commands too:

.. literalinclude:: /../tests/sh.py
   :language: python
   :pyobject: test_pipes


***************************
Differences with subprocess
***************************

XAL's ``sh`` interface is made to run ``sh`` commands in a session.
Think of the commands **always** run with ``sh -c``.
Whereas Python's subprocess sets ``shell=False`` by default.

This postulate influences design. XAL's sh interface helps you create and run
commands through ``sh``: pipes, redirects...
