###
xal
###

"xal" is a contextual execution framework for Python.

.. warning::

   This project is experimental. Current goal is to implement a
   proof-of-concept, so that the project can be shown and discussed with
   community and teams from other projects such as Fabric, Salt or zc.buildout.

   **Proposals focus about API and usage**, implementation comes next.

   At this early stage, even the name "xal" may be changed.

Xal helps you create scripts to manage resources or perform actions on a
system, independantly from the execution context:

>>> def home_directory_exists(session):
...     """Return True if home directory of session's user exists.
...
...     ``session`` argument is the execution context.
...
...     """
...     return session.dir.exists(session.dir.home)

Then create an execution session:

>>> # Using a factory to create a session with pre-configured registry.
>>> from xal.session.local import LocalSession
>>> session = LocalSession()

Finally run your scripts in the session:

>>> home_directory_exists(session)
True

Execution sessions can be local, remote, use Fabric, Salt... The main
motivation of this library is to provide a common set of tools for sysadmin
scripts.

Main use case are:

* deployment, provisioning;
* remote execution;
* portable execution.


**********
Ressources
**********

* Documentation: https://xal.readthedocs.org
* Code repository: https://github.com/benoitbryon/xal
* Bugtracker: https://github.com/benoitbryon/xal/issues
* Continuous integration: https://travis-ci.org/benoitbryon/xal
